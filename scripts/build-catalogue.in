#!/usr/bin/env python3

import subprocess as sp
import sys
from tempfile import TemporaryDirectory
import os
from pathlib import Path
import shutil
import stat
import string
import argparse
import re
def parse_arguments():
    def append_slash(s):
        return s+'/' if s and not s.endswith('/') else s

    class ConciseHelpFormatter(argparse.HelpFormatter):
        def __init__(self, **kwargs):
            super(ConciseHelpFormatter, self).__init__(max_help_position=20, **kwargs)

        def _format_action_invocation(self, action):
            if not action.option_strings:
                return super(ConciseHelpFormatter, self)._format_action_invocation(action)
            else:
                optstr = ', '.join(action.option_strings)
                if action.nargs==0:
                    return optstr
                else:
                    return optstr+' '+self._format_args(action, action.dest.upper())

    parser = argparse.ArgumentParser(
        description = 'Generate dynamic catalogue and build it into a shared object.',
        usage = '%(prog)s catalogue_name mod_source_dir',
        add_help = False,
        formatter_class = ConciseHelpFormatter)

    parser.add_argument('name',
                        metavar='name',
                        type=str,
                        help='Catalogue name.')

    parser.add_argument('modpfx',
                        metavar='modpfx',
                        type=str,
                        help='Directory name where *.mod files live.')

    parser.add_argument('-v', '--verbose',
                        action='store_true',
                        help='Verbose.')

    parser.add_argument('-q', '--quiet',
                        action='store_true',
                        help='Less output.')

    parser.add_argument('-h', '--help',
                        action='help',
                        help='Display this help and exit.')

    return vars(parser.parse_args())

args    = parse_arguments()
pwd     = Path.cwd()
name    = re.sub(r'_+', r'_',
                 re.sub(r'[^a-zA-Z0-9_]', r'_',
                        args['name']))

mod_dir = pwd / Path(args['modpfx'])
mods    = [ f[:-4] for f in os.listdir(mod_dir) if f.endswith('.mod') ]
verbose = args['verbose'] and not args['quiet']
quiet   = args['quiet']

cmake = f"""
cmake_minimum_required(VERSION 3.9)
project({name}-cat LANGUAGES CXX)

find_package(arbor REQUIRED)

set(CMAKE_CXX_COMPILER ${{ARB_CXX}})
set(CMAKE_CXX_FLAGS    ${{ARB_CXX_FLAGS}})

include(BuildModules.cmake)

set(ARB_WITH_EXTERNAL_MODCC true)
find_program(modcc NAMES modcc)

make_catalogue(
  NAME {name}
  SOURCES "${{CMAKE_CURRENT_SOURCE_DIR}}/mod"
  OUTPUT "CAT_{name.upper()}_SOURCES"
  MECHS {' '.join(mods)}
  PREFIX @ARB_INSTALL_DATADIR@
  CXX_FLAGS_TARGET ${{ARB_CXX_FLAGS_TARGET}}
  STANDALONE ON
  VERBOSE {"ON" if verbose else "OFF"})
"""

if not quiet:
    print(f"Building catalogue '{name}' from mechanisms in {mod_dir}")
    for m in mods:
        print(" *", m)

with TemporaryDirectory() as tmp:
    tmp = Path(tmp)
    shutil.copytree(mod_dir, tmp / 'mod')
    os.mkdir(tmp / 'build')
    os.chdir(tmp / 'build')
    with open(tmp / 'CMakeLists.txt', 'w') as fd:
        fd.write(cmake)
    shutil.copy2(f'@ARB_INSTALL_DATADIR@/BuildModules.cmake', tmp)
    shutil.copy2(f'@ARB_INSTALL_DATADIR@/generate_catalogue', tmp)
    sp.run('cmake ..', shell=True, check=True, capture_output=not verbose)
    sp.run('make',     shell=True, check=True, capture_output=not verbose)
    shutil.copy2(f'{name}-catalogue.so', pwd)
    if not quiet:
        print(f'Catalogue has been built and copied to {pwd}/{name}-catalogue.so')
